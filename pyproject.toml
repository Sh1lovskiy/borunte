[project]
name = "borunte"
version = "0.2.0"
description = "Borunte robotics toolkit for RGB-D acquisition, vision analysis, and calibration"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    { name = "Borunte Team" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
]

dependencies = [
    "google-genai>=1.45.0",
    "loguru>=0.7.3",
    "matplotlib>=3.10.6",
    "numpy>=2.3.3",
    "opencv-contrib-python>=4.11.0.86",
    "pandas>=2.3.2",
    "plotly>=6.3.1",
    "pymodbus>=3.0.0",
    "pynput>=1.8.1",
    "pyrealsense2>=2.56.5.9235",
    "scipy>=1.16.2",
    "seaborn>=0.13.2",
    "tqdm>=4.67.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "mypy>=1.8.0",
    "ruff>=0.6.0",
    "types-tqdm>=4.66.0",
]

[project.urls]
Homepage = "https://github.com/yourorg/borunte"
Repository = "https://github.com/yourorg/borunte"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# ============================================================================
# RUFF CONFIGURATION
# ============================================================================

[tool.ruff]
line-length = 100
target-version = "py312"
src = ["borunte", "calib", "vision", "utils"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
]
ignore = [
    "E203",   # whitespace before ':'
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "B905",   # zip strict parameter
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports in __init__ files
"tests/**" = ["S101"]     # Allow assert in tests

[tool.ruff.lint.isort]
known-first-party = ["borunte", "calib", "vision", "utils"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# ============================================================================
# MYPY CONFIGURATION
# ============================================================================

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
strict_optional = true
strict_equality = true
strict_concatenate = true
show_error_codes = true
show_error_context = true
pretty = true

# External libraries without stubs
[[tool.mypy.overrides]]
module = [
    "pyrealsense2.*",
    "cv2.*",
    "open3d.*",
    "plotly.*",
    "seaborn.*",
    "pymodbus.*",
    "pynput.*",
]
ignore_missing_imports = true

# ============================================================================
# PYTEST CONFIGURATION
# ============================================================================

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
    "--tb=short",
]
testpaths = ["tests"]
pythonpath = ["."]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "hardware: marks tests that require hardware (deselect with '-m \"not hardware\"')",
    "integration: marks integration tests",
]

[tool.coverage.run]
source = ["borunte", "calib", "vision", "utils"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
]
